package rules

rule "Debug lib-normalization"
	@nglSQ( calculations )
	dialect "java"
	salience 1000
	no-loop
    when
		$experiment:Experiment($typeCode:typeCode,$typeCode=="lib-normalization")
    eval(true)
    then
		Logger.debug("Rules annotation @nglSQ(calculations) lib-normalization");    
end

// calcul du volume engagé et du tampon
rule "InputVolume in lib-normalization inputContainer"
    @nglSQ( calculations )
	dialect "java"
	salience 920
	no-loop
    when
		$experiment:Experiment($typeCode:typeCode,$typeCode=="lib-normalization")
		$atomicTransfert: OneToOneContainer($inputContainerUsed:inputContainerUseds.get(0), $outputContainerUsed: outputContainerUseds.get(0))	
		
		// !! pb pas de concentration input tant qu'on a pas fait la Quantification!!! ....
		//DEBUG InputContainerUsed($inputConcentration: concentration, $inputConcentration!=null ) from $inputContainerUsed
		InputContainerUsed($inputVolume: volume, $inputVolume!=null ) from $inputContainerUsed
		
		OutputContainerUsed($outputVolume: volume, $outputVolume!=null ) from $outputContainerUsed
		OutputContainerUsed($outputConcentration: concentration, $outputConcentration!=null ) from $outputContainerUsed
		
		// cas 0 OK et cas pas de valeur OK ( volontairement ou avec valeur non numerique)
	    eval ( $outputVolume.value != null && convertPVToDouble($outputVolume) != 0 )
        eval ( $outputConcentration.value != null && convertPVToDouble($outputConcentration) != 0 )
        
        //ne pas calculer le volume engage si l'utisateur saisi qq chose.. TODO ???? Voir avec Julie
   then
   		// -1- calcul volume engagé
        Logger.debug("-1- InputVolume calculation");
       
        //Logger.debug("inputConcentration="+ Double.parseDouble($inputConcentration.getValue().toString()) );
        Double iConc=4.5;// DEBUG simuler une concentration input
        Logger.debug("inputConcentration="+iConc);
          
        // utiliser  convertPVToDouble !!
        //DEBUG Double engVolume = roundValue(convertPVToDouble($outputConcentration)*convertPVToDouble($outputVolume)/convertPVToDouble($inputConcentration))
        Double engVolume = roundValue(convertPVToDouble($outputConcentration)*convertPVToDouble($outputVolume)/iConc );
        Logger.debug("inputVolume="+ engVolume );
        
        //verifier que le volume engagé est réalisable: vol engagé <= vol input
        // NON ce n'est pas ici qu'il faut controler dit Guillaume
		///if ( engVolume <= Double.parseDouble($inputVolume.getValue().toString()) ){
         
           PropertySingleValue psvEngVolume = new PropertySingleValue(engVolume, "\u00B5L");
        
           if($inputContainerUsed.experimentProperties==null){
			   $inputContainerUsed.experimentProperties = new HashMap<String, PropertyValue>();		
		   }else if($inputContainerUsed.experimentProperties.containsKey("inputVolume")){
			   $inputContainerUsed.experimentProperties.remove("inputVolume");
		   }	
	       $inputContainerUsed.experimentProperties.put("inputVolume", psvEngVolume);

		   // -2- calcul volume de tampon : volume buffer= volume out - volume engagé
			Logger.debug("-2- volume tampon= volumeout - volume engagé");
			
			Double bfVolume = roundValue(convertPVToDouble($outputVolume) - engVolume );
		    Logger.debug("bufferVolume="+bfVolume);
		    
        	PropertySingleValue psvBufferVol = new PropertySingleValue(bfVolume, "\u00B5L");
        
        	if($inputContainerUsed.experimentProperties==null){
				$inputContainerUsed.experimentProperties = new HashMap<String, PropertyValue>();		
			}else if($inputContainerUsed.experimentProperties.containsKey("bufferVolume")){
				$inputContainerUsed.experimentProperties.remove("bufferVolume");
			}	
	   		$inputContainerUsed.experimentProperties.put("bufferVolume", psvBufferVol);	
	      
		//} else { 
		//	Logger.debug("PAS ASSEZ DE VOLUME DISPONIBLE!!"); 
		//}
		
		update($experiment);
end