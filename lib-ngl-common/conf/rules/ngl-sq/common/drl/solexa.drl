//created on: Aug 6, 2014
//Rules for validation
package rules

declare LaneInfo
	position : Integer
	contentInfos : List 
end

declare ContentInfo
	position : Integer
	containerCode : String 
	tag : String 
	tagCategory : String 
	sampleCode : String
	tagRealSize : Integer
	sequence : String
end

rule "Debug validations"
	@nglSQ( validations )
	dialect "java"
	salience 1000
	no-loop
    when
	eval(true)
    then
		Logger.debug("Rules annotation @nglSQ(validations)");    
	end

rule "Init object LaneInfo in WM"
	@nglSQ( validations )
	dialect "java"
	salience 700
	no-loop
    when
    $atomicTransfert: AtomicTransfertMethod($position : position)
    not LaneInfo($position==position)
    then
    
    LaneInfo laneInfo = new LaneInfo($position,new ArrayList());
    Logger.debug("Lane Info Position :"+$position);
    insert(laneInfo);
    
	end


rule "Init objects ContentInfo in WM"
		@nglSQ( validations )
	dialect "java"
	salience 600
	no-loop
    when
    $atomicTransfert: AtomicTransfertMethod($position:position,$inputContainers : getInputContainers(), $inputContainers.size()!=0)
	$container : ContainerUsed( $contents : contents,$contents!=null) from $atomicTransfert.inputContainers
	$content : Content() from $contents	 
	$laneInfo : LaneInfo($position==position)
    then
   
    String tag="VIDE";
    String tagCategory="VIDE";
    Integer tagRealSize = 0;
    String sequence = "VIDE";
    if($content.properties.containsKey("tag")){
    	tag=$content.properties.get("tag").value.toString();
    	Index index=MongoDBDAO.findOne(InstanceConstants.PARAMETER_COLL_NAME, Index.class, DBQuery.is("typeCode", "index-illumina-sequencing").is("code", tag));
    	if(index != null){
    		sequence = index.sequence;
    		tagRealSize = index.sequence.length();
    	}else{
    		Logger.debug("Can't find index "+tag+" in collection "+InstanceConstants.PARAMETER_COLL_NAME);
    	}
    }
    if($content.properties.containsKey("tagCategory")) tagCategory=$content.properties.get("tagCategory").value.toString();

	ContentInfo contentInfo= new ContentInfo($atomicTransfert.position,$container.code,tag,tagCategory,$content.sampleCode, tagRealSize, sequence);
	Logger.debug("Content Info Position : "+$atomicTransfert.position+ ", Sample Code :"+$content.sampleCode + ", Container Code :"+$container.code+", Tag :"+tag+", tagCategory :"+tagCategory+", size :"+tagRealSize+", sequence :"+sequence);
    $laneInfo.getContentInfos().add(contentInfo);
	insert(contentInfo);
	
    end



rule "Input not null for Experiment Type Prepa-flowcell"
	@nglSQ( validations )
	dialect "java"
	salience 510
	no-loop
    when
    	$experiment:Experiment($typeCode : typeCode, $typeCode=="prepa-flowcell")
    	$atomics:AtomicTransfertMethod($inputContainers : getInputContainers())
    	$contextValidation:ContextValidation()
    	eval($inputContainers.size()==0)
    then
    	//Logger.debug("Erreur position "+$atomics.position);
    	$contextValidation.addErrors("lane["+$atomics.position+"]",	"error.validationexp.emptyoutputcontainer",$atomics.position);
    end
    
    
rule "Container duplicate in Lane"
	@nglSQ( validations )
	dialect "java"
	salience 500
	no-loop
    when
    	  LaneInfo($position:position)
    	  AtomicTransfertMethod($position==position,$inputContainers : getInputContainers())
    	  $containerCodes : Set(empty==false, size >= 1) from accumulate( ContainerUsed($containerCode:code) from $inputContainers,
	                         init( HashSet result = new HashSet(); HashSet containers=new HashSet(); ),
                              action( if(!containers.contains($containerCode)){ containers.add($containerCode); } 
                              				else if(!result.contains($containerCode)) { result.add($containerCode);} ),
                             reverse( result.remove($containerCode); ),
                              result( result) )
		 $containerDuplicate : String() from $containerCodes
		 $contextValidation:ContextValidation()
    then
    	//Logger.debug("Erreur containers "+$containerDuplicate);
 		$contextValidation.addErrors("lane["+$position+"]",	"error.validationexp.duplicateinputcontainers",$containerDuplicate, $position);
    end
   	
rule "Sum % percentage per piste = 100 % "
	@nglSQ( validations )
	dialect "java"
	salience 580
	no-loop
    when
    $atomics:AtomicTransfertMethod($inputContainers : getInputContainers())
    Experiment($instrument: instrument)   
    $total : Double() from accumulate(ContainerUsed( $n:percentage, percentage!=null) from $inputContainers, sum( $n ) )
    $container: ContainerUsed($cat : categoryCode) from $inputContainers
    eval(!($total>=99.9 && $total<=100) )
    $contextValidation:ContextValidation()
   	 then
   		Logger.debug("Regles de validation des pourcentages solexa "+ $total +' '+$atomics.position);   		
   		
   		if(("tube").equals($instrument.outContainerSupportCategoryCode)){   			 
   			if(!$contextValidation.errors.containsKey("tube["+$atomics.position+"]")){  		
   			$contextValidation.addErrors("tube["+$atomics.position+"]",	"error.validationexp.percentperoutputcontainertube", $total,$atomics.position);
   			}
   		}else if(Pattern.matches("^flowcell.*",$instrument.outContainerSupportCategoryCode)){
   			$contextValidation.addErrors("lane["+$atomics.position+"]",	"error.validationexp.percentperoutputcontainerlane", $total,$atomics.position);
   		}else if(("mapcard").equals($instrument.outContainerSupportCategoryCode)){
   			if(!$contextValidation.errors.containsKey("mapcard["+$atomics.position+"]")){
   			$contextValidation.addErrors("mapcard["+$atomics.position+"]",	"error.validationexp.percentperoutputcontainermapcard", $total,$atomics.position);
   			}
   		}else{
   			if(!$contextValidation.errors.containsKey("output container["+$atomics.position+"]")){
   			$contextValidation.addErrors("output container["+$atomics.position+"]",	"error.validationexp.percentperoutputcontainerdefault", $total);
   			}
   		}   	
   		
   	end
   	
rule "Tag identique sur la meme position"
	@nglSQ (validations )
	dialect "java"
	salience 400
	no-loop
    when
    	   $contentInfo1 : ContentInfo($tag :tag,$sampleCode :sampleCode,$position:position,$containerCode1:containerCode)
           $contentInfo2 : ContentInfo(this != $contentInfo1, tag == $tag, position==$position, sampleCode!=$sampleCode,$containerCode2:containerCode)
           $contextValidation:ContextValidation()
    then
    	//Logger.debug("Tag error "+$contentInfo1 + " position "+$position);
    	$contextValidation.addErrors("lane["+$position+"]",	"error.validationexp.sametag", $tag,$containerCode1,$containerCode2);    	
    end

rule "Many TagCategory on same position"
	@nglSQ (validations )
	dialect "java"
	salience 300
	no-loop
when
	 LaneInfo($position:position)
     $tagCategories : Set(empty==false, size > 1) from accumulate( ContentInfo ( $tagCategory : tagCategory,$position==position),
                        collectSet( $tagCategory) )
	  $contextValidation:ContextValidation($errors : errors)
then
	Logger.debug("TagCategory error "+ $tagCategories.size()+" position "+$position);
    $contextValidation.addErrors("lane["+$position+"]",	"error.validationexp.manytagCategory", $position);
end

rule "Same tag size"
	@nglSQ (validations )
	dialect "java"
	salience 301
	no-loop
when
	 LaneInfo($position:position)
     $tagRealSizes : Set(empty==false, size > 1) from accumulate( ContentInfo ( $tagRealSize : tagRealSize, $position==position),
                        collectSet( $tagRealSize) )
	  $contextValidation:ContextValidation($errors : errors)
then
	Logger.debug("Tag squence error "+ $tagRealSizes+" position "+$position);
    $contextValidation.addErrors("lane["+$position+"]",	"error.validationexp.manytagSize", $position);
end

rule "Same sequence"
	@nglSQ (validations )
	dialect "java"
	salience 302
	no-loop
when
	 LaneInfo($position:position, $contentInfos:contentInfos)
     $sequences : Set(empty==false, size != $contentInfos.size()) from accumulate( ContentInfo ( $sequence : sequence, $position==position),
                        collectSet( $sequence) )
	  $contextValidation:ContextValidation($errors : errors)
then
	Logger.debug("Tag squence error "+ $sequences+" and "+$contentInfos.size()+" position "+$position);
    $contextValidation.addErrors("lane["+$position+"]",	"error.validationexp.sameTagSequence", $position, $sequences);
end

rule "RunStartDate propertie is mandatory to create Illumina Depot and Opgen Depot"
@nglSQ (validations )
	dialect "java"
	salience 500
	no-loop
when
	$experiment: Experiment($typeCode:typeCode,$typeCode=="illumina-depot"|| $typeCode=="opgen-depot" , $state: state, $state.code=="N",$experimentProperties: experimentProperties, traceInformation!=null, $creationDate: traceInformation.creationDate)
	$runStartDate: PropertyValue() from $experimentProperties.get("runStartDate")	
	//$contextValidation:ContextValidation($errors : errors)
	eval( ($experimentProperties == null || $runStartDate==null || $runStartDate.value==null || $runStartDate.value=="" ) && ($creationDate!=null && Date.class.isInstance($creationDate) ))
then	
	Logger.info("Règle RunStartDate propertie OK");
	PropertySingleValue value = new PropertySingleValue($creationDate);
	$experimentProperties.remove("runStartDate");
	$experimentProperties.put("runStartDate", value);
	//$contextValidation.addErrors("experiment", "error.validationexp.mandatoryrunstartdate", $typeCode, $runStartDate);
	Logger.info("Date réel de dépot = " + $experimentProperties.get("runStartDate"));
	update ($experiment);

end

rule "Prepaflowcell validate contenant sortie avec instrument"
	@nglSQ (validations )
	dialect "java"
	salience 400
	no-loop
    when
    	Experiment($typeCode:typeCode,$typeCode=="prepa-flowcell",$instrumentCode:instrument.code
    			,$outputContainerSupport:instrument.outContainerSupportCategoryCode, 
    		( $instrumentCode in("cBot Fluor A","cBot Fluor B","cBot Platine A","cBot Platine B") && $outputContainerSupport=="flowcell-1")
    		 || 
    		 ($instrumentCode in("cBot Melisse","cBot Mimosa") && $outputContainerSupport=="flowcell-2") )
    	$contextValidation:ContextValidation($errors : errors)
    then
    	Logger.debug("outputcontainersupport "+$outputContainerSupport + ", instrument code "+$instrumentCode);
    	$contextValidation.addErrors("instrument",	"error.validationexp.badoutputprepaflowcell", $outputContainerSupport,$instrumentCode);
    end

rule "Prepaflowcell validate piste controle"
	@nglSQ (validations )
	dialect "java"
	salience 400
	no-loop
    when
    	Experiment($typeCode:typeCode,$typeCode=="prepa-flowcell",$instrumentProperties:instrumentProperties,$outputContainerSupport:instrument.outContainerSupportCategoryCode)
    	$control :PropertyValue($value:value, 
    		($value in ("3","4","5","6","7","8")  && $outputContainerSupport=="flowcell-2" )
			||
			( $value in ("2","3","4","5","6","7","8") && $outputContainerSupport=="flowcell-1")    	
    	) from $instrumentProperties.get("control")
    	$contextValidation:ContextValidation($errors : errors)
    then
    	Logger.debug("outputcontainersupport "+$outputContainerSupport + ", piste controle ");
    	$contextValidation.addErrors("instrument",	"error.validationexp.badcontrolprepaflowcell", $value,$outputContainerSupport);
    end    

rule "Code Flowcell without bad chars"
    @nglSQ( validations )
	dialect "java"
	salience 900
	no-loop
    when
    $experiment:Experiment($typeCode:typeCode,$typeCode=="prepa-flowcell",$instrumentProperties:instrumentProperties)
    $containerSupportCode: PropertyValue($code:value, $code matches ".*[^a-zA-Z0-9].*") from $instrumentProperties.get("containerSupportCode")
    $contextValidation:ContextValidation()
    then
    Logger.debug("Code Flowcell without bad chars");
    $contextValidation.addErrors("instrument",	"error.validationexp.codewithbadchar", "Code Flowcell");
end

rule "Same concentrations in  Pool-tube"
    @nglSQ( validations )
	dialect "java"
	salience 950
	no-loop
    when
		$experiment:Experiment($typeCode:typeCode,$typeCode=="pool-tube")
		$atomicTransfert: ManytoOneContainer($inputContainerUseds : inputContainerUseds, $inputContainerUseds!=null)
		$total : Double() from accumulate(ContainerUsed($c: concentration, $c!=null) from $inputContainerUseds, sum( Double.parseDouble($c.getValue().toString()) ) )
		$containerUsed: ContainerUsed($code: code,$concentration: concentration, $concentration!=null) from $inputContainerUseds				
		$contextValidation:ContextValidation()
		eval( Double.parseDouble($concentration.getValue().toString())!= (Double) $total/$inputContainerUseds.size())
    then
    	Double value = Double.parseDouble($concentration.getValue().toString());
    	Logger.debug("value = " + value);
    	Logger.debug("Same concentrations in  Pool-tube");
    	$contextValidation.addErrors("pool-tube","error.validationexp.sameconcentration",$code);
end

rule "Volume not null in SolutionStock outputContainer"
    @nglSQ( validations )
	dialect "java"
	salience 940
	no-loop
    when
    	$experiment:Experiment($typeCode:typeCode,$typeCode=="solution-stock")
		$atomicTransfert: OneToOneContainer($inputContainerUsed:inpinputContainerUsedsoutputContainerUsed: outputContainerUsed)
	   	ContainerUsed($finalVolume: volume) from $outputContainerUsed
    	$contextValidation:ContextValidation()
    	eval($finalVolume == null || $finalVolume.value == null || $finalVolume.value == "")
    then
    Logger.debug("Volume not null in SolutionStock outputContainer");
    Integer i = null;
    for(Map.Entry<Integer,AtomicTransfertMethod> entry : $experiment.atomicTransfertMethods.entrySet()){
    	Integer index = entry.getKey();
    	OneToOneContainer atomic = (OneToOneContainer) entry.getValue();
    	if(($inputContainerUsed.code).equals(atomic.inputContainerUsed.code)){
    	 $contextValidation.addErrors("solution-stock","error.validationexp.outputvolumenotnull", index);
    	}
    }
   
end

rule "Concentration not null in SolutionStock outputContainer"
    @nglSQ( validations )
	dialect "java"
	salience 930
	no-loop
    when
    	$experiment:Experiment($typeCode:typeCode,$typeCode=="solution-stock")
		$atomicTransfert: OneToOneContainer($inputContainerUsed:inpinputContainerUsedsoutputContainerUsed: outputContainerUsed)
		ContainerUsed($finalConcentration: concentration) from $outputContainerUsed
		$contextValidation:ContextValidation()
		eval($finalConcentration == null || $finalConcentration.value == null || $finalConcentration.value == "") 
    then
    Logger.debug("Concentration not null in SolutionStock outputContainer");
    Integer i = null;
    for(Map.Entry<Integer,AtomicTransfertMethod> entry : $experiment.atomicTransfertMethods.entrySet()){
    	Integer index = entry.getKey();
    	OneToOneContainer atomic = (OneToOneContainer) entry.getValue();
    	if(($inputContainerUsed.code).equals(atomic.inputContainerUsed.code)){
    	 $contextValidation.addErrors("solution-stock","error.validationexp.outputconcentrationnotnull", index);
    	}
    }    
end

    