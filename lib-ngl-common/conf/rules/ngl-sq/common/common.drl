//created on: Aug 6, 2014
//Rules for validation
package rules


declare InputSupport
	code : String
	categoryCode : String
end

declare InputContainer
	code : String
	supportCode : String 
	line : String
	column : String
end

rule "Input not null for all Experiment"
	@nglSQ( validations )
	dialect "java"
	salience 510
	no-loop
    when
    	$experiment:Experiment()
    	$atomics:AtomicTransfertMethod($inputContainers : inputContainerUseds)
    	$contextValidation:ContextValidation()
    	eval($inputContainers.size()==0)
    then
    	//Logger.debug("Erreur position "+$atomics.position);
    	$contextValidation.addErrors("lane["+$atomics.line+"]",	"error.validationexp.emptyoutputcontainer",$atomics.line);
    end
    

rule "Set RunStartDate to Illumina Depot, Opgen Depot, Nanopore Depot if not exist"
@nglSQ (calculations )
	dialect "java"
	salience 500
	no-loop
when
	$experiment: Experiment($typeCode:typeCode,$typeCode=="illumina-depot"|| $typeCode=="opgen-depot" || $typeCode=="nanopore-depot" || $typeCode=="bionano-depot" , $state: state, $state.code=="N", 
					$experimentProperties: experimentProperties, (null == $experimentProperties || (null != $experimentProperties && null == $experimentProperties.get("runStartDate"))), traceInformation!=null, $creationDate: traceInformation.creationDate)	
then	
	Logger.info("Regle RunStartDate propertie OK");
	if($experimentProperties==null){
		$experiment.experimentProperties=new HashMap<String,PropertyValue>();
	}
	PropertySingleValue value = new PropertySingleValue($creationDate);
	$experiment.experimentProperties.put("runStartDate", value);
	//$contextValidation.addErrors("experiment", "error.validationexp.mandatoryrunstartdate", $typeCode, $runStartDate);
	Logger.info("Date reel de d√©pot = " + $experiment.experimentProperties.get("runStartDate"));
	update ($experiment);

end


rule "init inputsupport"
	@nglSQ( validations )
	dialect "java"
	salience 1000
	no-loop
    when
	Experiment($typeCode:typeCode,$typeCode=="illumina-depot" || $typeCode=="bionano-depot",$atomics:atomicTransfertMethods,$atomics!=null)
	AtomicTransfertMethod($inputContainerUseds:inputContainerUseds) from $atomics
    InputContainerUsed($support:locationOnContainerSupport.code,$categoryCode:locationOnContainerSupport.categoryCode) from $inputContainerUseds
	not InputSupport($support==code)
    then
		//Logger.debug("Support"+$support +" de category "+$categoryCode);
		InputSupport inputSupport=new InputSupport($support,$categoryCode);
		insert(inputSupport);
	end

rule "init InputContainer"
	@nglSQ( validations )
	dialect "java"
	salience 1000
	no-loop
    when
	Experiment($typeCode:typeCode,$typeCode=="illumina-depot" || $typeCode=="bionano-depot",$atomics:atomicTransfertMethods,$atomics!=null)
    AtomicTransfertMethod($inputContainerUseds:inputContainerUseds) from $atomics
    $containerUsed:InputContainerUsed($code:code) from $inputContainerUseds
    not InputContainer(code==$code)
    then
    InputContainer inputContainer=new InputContainer($code,$containerUsed.getLocationOnContainerSupport().getCode(),$containerUsed.getLocationOnContainerSupport().getLine(),
    															$containerUsed.getLocationOnContainerSupport().getColumn());
   // Logger.debug("Container "+$code+" in support "+$containerUsed.getLocationOnContainerSupport().getCode());
    insert(inputContainer);
    end


rule "only one inputssupport"
	@nglSQ (validations )
	dialect "java"
	salience 400
	no-loop
    when
    Experiment($typeCode:typeCode,$typeCode=="illumina-depot" || $typeCode=="bionano-depot")
    Set(empty==false,size!=1) from collect(InputSupport())
    $contextValidation:ContextValidation($errors : errors)
    then 
    	$contextValidation.addErrors("inputContainerSupportCodes","error.validationexp.oneInputSupport", $typeCode);
    end
    
rule "input all container from support"
	@nglSQ (validations )
	dialect "java"
	salience 400
	no-loop
    when
 	Experiment($typeCode:typeCode,$typeCode=="illumina-depot" || $typeCode=="bionano-depot")
 	InputSupport($support:code,$categoryCode:categoryCode,$categoryCode!=null)
 	$inputContainers:Set(empty==false) from collect(InputContainer($support==supportCode))
 	$contextValidation:ContextValidation($errors : errors)
 	eval(!$categoryCode.endsWith(Integer.toString($inputContainers.size())))	
 	then
	 		$contextValidation.addErrors("inputContainerSupportCodes","error.validationexp.notAllInputContainer", $support);
	end


rule "Atomictransfert methods empty"
	@nglSQ( validations )
	dialect "java"
	salience 1000
	no-loop
    when
    	$experiment:Experiment($atomics:atomicTransfertMethods)
    	$contextValidation:ContextValidation($errors : errors)
    	eval($atomics.size()==0)
    then
    	$contextValidation.addErrors("atomicTransfertMethods",	"error.validationexp.emptycontainer");
    end



    