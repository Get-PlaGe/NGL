//created on: Aug 6, 2014
//Rules for calculations
package rules

rule "volume stock engaged in denat"
	@nglSQ( calculations )
	dialect "java"
	salience 1000
	no-loop
	lock-on-active true
    when
    	 $experiment:Experiment($typeCode:typeCode,$typeCode=="prepa-flowcell", $stateCode : state.code, $stateCode!="F")
    	 $atomicTransfert: ManyToOneContainer( )
    	 InputContainerUsed( $experimentProperties : experimentProperties,$experimentProperties!=null, $concentrationIN:concentration) from $atomicTransfert.inputContainerUseds
    	 $finalConcentration1 : PropertyValue() from $experimentProperties.get("finalConcentration1")
    	 $finalVolume1 : PropertyValue() from $experimentProperties.get("finalVolume1")
    	 eval($finalVolume1.value != null && Double.class.isInstance($finalVolume1.value) && $finalConcentration1.value != null && Double.class.isInstance($finalConcentration1.value) && Double.parseDouble($concentrationIN.value.toString()) != 0)
   	then
   		Logger.debug("Calculation Test  1: "+ $experiment.code+ " "+ $atomicTransfert.line+" "+ $finalConcentration1.value+"  "+$concentrationIN.value);
   		PropertySingleValue value = new PropertySingleValue(Math.round((Double)$finalConcentration1.value*(Double)$finalVolume1.value/Double.parseDouble($concentrationIN.value.toString())*100.0)/100.0,"\u00B5L");
   		if($experimentProperties.get("requiredVolume1") != null){
   			$experimentProperties.remove("requiredVolume1");
   		}

   		$experimentProperties.put("requiredVolume1",value);   		
   		update($experiment);
   	end
   
rule "volume PhiX"
	@nglSQ( calculations )
	dialect "java"
	salience 700
	no-loop
	lock-on-active true
	when
		 $experiment:Experiment($typeCode:typeCode,$typeCode=="prepa-flowcell", $stateCode : state.code, $stateCode!="F")
		 $atomicTransfert: ManyToOneContainer( )
		 InputContainerUsed( $experimentProperties : experimentProperties,$experimentProperties!=null) from $atomicTransfert.inputContainerUseds
		 OutputContainerUsed( $experimentPropertiesOut : experimentProperties,$experimentPropertiesOut!=null) from $atomicTransfert.outputContainerUseds
		 $phixPercent : PropertyValue() from $experimentPropertiesOut.get("phixPercent")
		 $finalConcentration2 : PropertyValue() from $experimentProperties.get("finalConcentration2")
		 $finalVolume2 : PropertyValue() from $experimentProperties.get("finalVolume2")
		 $phixConcentration : PropertyValue() from $experimentProperties.get("phixConcentration")
		 eval($phixPercent.value != null &&  Double.class.isInstance($phixPercent.value) && $finalVolume2.value != null && Double.class.isInstance($finalVolume2.value) && $phixConcentration.value != null && Double.class.isInstance($phixConcentration.value))
	then
		Logger.debug("Calculation Test  5: "+ $experiment.code+ " "+ $atomicTransfert.line);
		PropertySingleValue value = new PropertySingleValue(Math.round(((Double)$phixPercent.value*(Double)$finalConcentration2.value*(Double)$finalVolume2.value/(Double)$phixConcentration.value))/100.0,"\u00B5L");
		if($experimentProperties.get("phixVolume") != null){
			$experimentProperties.remove("phixVolume");
		}
		
		$experimentProperties.put("phixVolume",value);
		
		update($experiment);
	end   
	
rule "volume EB"
	@nglSQ( calculations )
	dialect "java"
	salience 900
	no-loop
    when
    	 $experiment:Experiment($typeCode:typeCode,$typeCode=="prepa-flowcell", $stateCode : state.code, $stateCode!="F")
    	 $atomicTransfert: ManyToOneContainer( )
    	 InputContainerUsed( $experimentProperties : experimentProperties,$experimentProperties!=null, $concentrationIN:concentration) from $atomicTransfert.inputContainerUseds
    	 $naohVolume : PropertyValue() from $experimentProperties.get("NaOHVolume")
    	 $finalVolume1 : PropertyValue() from $experimentProperties.get("finalVolume1")
    	 $requiredVolume1 : PropertyValue() from $experimentProperties.get("requiredVolume1")
    	 eval($requiredVolume1.value != null && Double.class.isInstance($requiredVolume1.value) && $finalVolume1.value != null && Double.class.isInstance($finalVolume1.value) && $naohVolume.value != null && Double.class.isInstance($naohVolume.value))
   	then
   		Logger.debug("Calculation Test  2: "+ $experiment.code+ " "+ $atomicTransfert.line);
   		PropertySingleValue value = new PropertySingleValue(Math.round(((Double)$finalVolume1.value-(Double)$requiredVolume1.value-(Double)$naohVolume.value)*100.0)/100.0,"\u00B5L");
   		if($experimentProperties.get("EBVolume") != null){
   			$experimentProperties.remove("EBVolume");
   		}
   		
   		$experimentProperties.put("EBVolume", value);
   	end  
   	 	
rule "volume engaged in dilution"
	@nglSQ( calculations )
	dialect "java"
	salience 800
	lock-on-active true
	no-loop
    when
    	 $experiment:Experiment($typeCode:typeCode,$typeCode=="prepa-flowcell", $stateCode : state.code, $stateCode!="F")
    	 $atomicTransfert: ManyToOneContainer( )
    	 InputContainerUsed( $experimentProperties : experimentProperties,$experimentProperties!=null) from $atomicTransfert.inputContainerUseds
    	 $finalConcentration2 : PropertyValue() from $experimentProperties.get("finalConcentration2")
    	 $finalVolume2 : PropertyValue() from $experimentProperties.get("finalVolume2")
    	 $finalConcentration1 : PropertyValue() from $experimentProperties.get("finalConcentration1")
    	 eval($finalConcentration2.value != null && Double.class.isInstance($finalConcentration2.value) && $finalVolume2.value != null && Double.class.isInstance($finalVolume2.value) && $finalConcentration1.value != null && Double.class.isInstance($finalConcentration1.value) && (Double)$finalConcentration1.value !=0)
   	then
   		Logger.debug("Calculation Test  3: "+ $experiment.code+ " "+ $atomicTransfert.line);
   		PropertySingleValue value = new PropertySingleValue(Math.round(((Double)$finalConcentration2.value*(Double)$finalVolume2.value/(Double)$finalConcentration1.value)*100.0)/100.0,"\u00B5L");
   		if($experimentProperties.get("requiredVolume2") != null){
   			$experimentProperties.remove("requiredVolume2");
   		}
   		
   		$experimentProperties.put("requiredVolume2",value);
   		update($experiment);
   	end

rule "volume HT1"
	@nglSQ( calculations )
	dialect "java"
	salience 600
	no-loop
	when
		 $experiment:Experiment($typeCode:typeCode,$typeCode=="prepa-flowcell", $stateCode : state.code, $stateCode!="F")
		 $atomicTransfert: ManyToOneContainer( )
		 InputContainerUsed( $experimentProperties : experimentProperties,$experimentProperties!=null) from $atomicTransfert.inputContainerUseds
		 $phixVolume : PropertyValue() from $experimentProperties.get("phixVolume")
		 $finalVolume2 : PropertyValue() from $experimentProperties.get("finalVolume2")
		 $requiredVolume2 : PropertyValue() from $experimentProperties.get("requiredVolume2")
		 eval($phixVolume.value != null && Double.class.isInstance($phixVolume.value) && $finalVolume2.value != null && Double.class.isInstance($finalVolume2.value) && $requiredVolume2.value != null && Double.class.isInstance($requiredVolume2.value))
	then
		Logger.debug("Calculation Test  4: "+ $experiment.code+ " "+ $atomicTransfert.line);
		PropertySingleValue value = new PropertySingleValue(Math.round(((Double)$finalVolume2.value-(Double)$requiredVolume2.value-(Double)$phixVolume.value)*100.0)/100.0,"\u00B5L");
		if($experimentProperties.get("HT1Volume") != null){
			$experimentProperties.remove("HT1Volume");
		}
		
		$experimentProperties.put("HT1Volume",value);
	end
	
rule "Volume dilution on track"
	@nglSQ( calculations )
	dialect "java"
	salience 500
	no-loop
	when
		 $experiment:Experiment($typeCode:typeCode,$typeCode=="prepa-flowcell", $stateCode : state.code, $stateCode!="F")
		 $atomicTransfert: ManyToOneContainer( )
		 InputContainerUsed( $experimentProperties : experimentProperties,$experimentProperties!=null, $percentPerLane:percentage) from $atomicTransfert.inputContainerUseds
		 OutputContainerUsed( $experimentPropertiesOut : experimentProperties,$experimentPropertiesOut!=null) from $atomicTransfert.outputContainerUseds
		 $finalVolume : PropertyValue() from $experimentPropertiesOut.get("finalVolume")
		 eval($finalVolume.value != null && Double.class.isInstance($finalVolume.value) && $percentPerLane != null && Double.class.isInstance($percentPerLane))
	then
		Logger.debug("Calculation Test  6: "+ $experiment.code+ " "+ $atomicTransfert.line);
		PropertySingleValue value = new PropertySingleValue(Math.round($percentPerLane*(Double)$finalVolume.value)/100.0,"\u00B5L");
		if($experimentProperties.get("requiredVolume3") != null){
			$experimentProperties.remove("requiredVolume3");
		}
		
		$experimentProperties.put("requiredVolume3",value);
	end
	
rule "Code Flowcell without bad chars"
    @nglSQ( validations )
	dialect "java"
	salience 900
	no-loop
    when
    $experiment:Experiment($typeCode:typeCode,$typeCode=="prepa-flowcell",$instrumentProperties:instrumentProperties)
    $containerSupportCode: PropertyValue($code:value, $code matches ".*[^a-zA-Z0-9].*") from $instrumentProperties.get("containerSupportCode")
    $contextValidation:ContextValidation()
    then
    Logger.debug("Code Flowcell without bad chars");
    $contextValidation.addErrors("instrument",	"error.validationexp.codewithbadchar", "Code Flowcell");
end

rule "Prepaflowcell validate contenant sortie avec instrument"
	@nglSQ (validations )
	dialect "java"
	salience 400
	no-loop
    when
    	Experiment($typeCode:typeCode,$typeCode=="prepa-flowcell",$instrumentCode:instrument.code
    			,$outputContainerSupport:instrument.outContainerSupportCategoryCode, 
    		( $instrumentCode in("cBot Fluor A","cBot Fluor B","cBot Platine A","cBot Platine B") && $outputContainerSupport=="flowcell-1")
    		 || 
    		 ($instrumentCode in("cBot Melisse","cBot Mimosa") && $outputContainerSupport=="flowcell-2") )
    	$contextValidation:ContextValidation($errors : errors)
    then
    	Logger.debug("outputcontainersupport "+$outputContainerSupport + ", instrument code "+$instrumentCode);
    	$contextValidation.addErrors("instrument",	"error.validationexp.badoutputprepaflowcell", $outputContainerSupport,$instrumentCode);
    end

rule "Prepaflowcell validate piste controle"
	@nglSQ (validations )
	dialect "java"
	salience 400
	no-loop
    when
    	Experiment($typeCode:typeCode,$typeCode=="prepa-flowcell",$instrumentProperties:instrumentProperties,$outputContainerSupport:instrument.outContainerSupportCategoryCode)
    	$control :PropertyValue($value:value, 
    		($value in ("3","4","5","6","7","8")  && $outputContainerSupport=="flowcell-2" )
			||
			( $value in ("2","3","4","5","6","7","8") && $outputContainerSupport=="flowcell-1")    	
    	) from $instrumentProperties.get("control")
    	$contextValidation:ContextValidation($errors : errors)
    then
    	Logger.debug("outputcontainersupport "+$outputContainerSupport + ", piste controle ");
    	$contextValidation.addErrors("instrument",	"error.validationexp.badcontrolprepaflowcell", $value,$outputContainerSupport);
    end    

