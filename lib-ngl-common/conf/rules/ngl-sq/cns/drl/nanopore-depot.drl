//created on: Apr 21, 2015
package rules



declare InputSupport
	code : String
	categoryCode : String
end


rule "init inputsupport nanopore"
	@nglSQ( validations )
	dialect "java"
	salience 1000
	no-loop
    when
	Experiment($typeCode:typeCode,$typeCode=="nanopore-depot",$atomics:atomicTransfertMethods,$atomics!=null)
	AtomicTransfertMethod($inputContainerUseds:inputContainerUseds) from $atomics
    ContainerUsed($support:locationOnContainerSupport.code,$categoryCode:locationOnContainerSupport.categoryCode) from $inputContainerUseds
	not InputSupport($support==code)
    then
		//Logger.debug("Support"+$support +" de category "+$categoryCode);
		InputSupport inputSupport=new InputSupport($support,$categoryCode);
		insert(inputSupport);
	end

rule "only one inputssupport nanopore"
	@nglSQ (validations )
	dialect "java"
	salience 400
	no-loop
    when
    Experiment($typeCode:typeCode,$typeCode=="nanopore-depot")
    Set(empty==false,size!=1) from collect(InputSupport())
    $contextValidation:ContextValidation($errors : errors)
    then 
    	$contextValidation.addErrors("inputContainerSupportCodes","error.validationexp.oneInputSupport", $typeCode);
    end
 


rule "Validation nanopore-depot"
	@nglSQ( validations )
	dialect "java"
	salience 1000
	no-loop
    when
    $experiment:Experiment($typeCode:typeCode,$typeCode=="nanopore-depot")
    eval(true)
    then
		Logger.debug("Rules annotation @nglSQ(validations) nanopore-depot");    
end


rule "Validation outputcode nanopore-depot"
	@nglSQ( validations )
	dialect "java"
	salience 1000
	no-loop
	when 
	$experiment:Experiment($instrumentProperties: instrumentProperties,$typeCode:typeCode,$typeCode=="nanopore-depot")
	$containerSupportCode : PropertyValue() from $instrumentProperties.get("containerSupportCode")
	eval(!$containerSupportCode.value.toString().contains("_"))
	$contextValidation:ContextValidation($errors : errors)
	then
		 Logger.debug("Error code nanopore-depot "+$containerSupportCode.value);
		 $contextValidation.addErrors("instrumentproperties[containerSupportCode]",	"error.validationexp.containerSupportCodeContainString", $containerSupportCode.value, "_"); 
end

rule "Create Run and ReadSets Nanopore"
	@nglSQ( workflow )
	dialect "java"
	salience 1000
	no-loop
	when 
	$experiment:Experiment($state:state.code,$typeCode:typeCode,$typeCode=="nanopore-depot",$state=="F")
	then
		 Logger.debug("Nanopore-depot update state code : "+$state);
		 Run run=new Run();
		 
 		 run.sequencingStartDate=new Date();
		 run.state=new State("IP-S","ngsrg");
	
		run.containerSupportCode=$experiment.outputContainerSupportCodes.toArray()[0].toString();
   		run.projectCodes = $experiment.projectCodes;
    	run.sampleCodes = $experiment.sampleCodes;
   		run.traceInformation=new TraceInformation();
   		run.traceInformation.setTraceInformation("ngsrg");
   		
   		run.instrumentUsed=new InstrumentUsed();
   		run.instrumentUsed.typeCode=$experiment.instrument.typeCode;
   		run.instrumentUsed.code=$experiment.instrument.code;
    	
    	run.code=((new SimpleDateFormat("yyMMdd")).format(new Date()))+"_"+run.instrumentUsed.code+"_"+run.containerSupportCode;
    //public Map<String,Treatment> treatments = new HashMap<String,Treatment>();
		
		insert(run);
end

rule "Update type Run RMINION"
	@nglSQ( workflow )
	dialect "java"
	salience 900
	no-loop
	when 

	$run:Run(typeCode==null,$instrumentTypeCode:instrumentUsed.typeCode,$instrumentTypeCode=="minION")
	then
		 Logger.debug("typeCode RMINION");
		$run.typeCode="RMINION";	
		update($run);
end


rule "Update type Run RMKI"
	@nglSQ( workflow )
	dialect "java"
	salience 900
	no-loop
	when 
	$run:Run(typeCode==null,$instrumentTypeCode:instrumentUsed.typeCode,$instrumentTypeCode=="mk1")
	then
		Logger.debug("typeCode RMKI");
		$run.typeCode="RMKI";	
		update($run);
end

rule "Save Run"
	@nglSQ( workflow )
	dialect "java"
	salience 800
	no-loop
	when 
	$run:Run(typeCode!=null)
    $contextError:ContextValidation()
	then
		Logger.debug("Save run");
		InstanceHelpers.save(InstanceConstants.RUN_ILLUMINA_COLL_NAME,$run,$contextError,true);
		retract($run);
end


/*rule "minKnowVersion required in end of experiment ( not IP)"
	@nglSQ( validations )
	dialect "java"
	salience 1000
	no-loop
	when 
	$experiment:Experiment($instrumentProperties: instrumentProperties,$typeCode:typeCode,$typeCode=="nanopore-depot",state.code=="IP")
	not PropertyValue() from $instrumentProperties.get("minKnowVersion")
	$contextValidation:ContextValidation($errors : errors)
	then
		 Logger.debug("Error code nanopore-depot instrument properties minKnowVersion");
		 $contextValidation.addErrors("minKnowVersion","error.required");  
end


rule "metrichorVersion required in end of experiment (not IP)"
	@nglSQ( validations )
	dialect "java"
	salience 1000
	no-loop
	when 
	$experiment:Experiment($instrumentProperties: instrumentProperties,$typeCode:typeCode,$typeCode=="nanopore-depot",state.code=="IP")
	not PropertyValue() from $instrumentProperties.get("metrichorVersion")
	$contextValidation:ContextValidation($errors : errors)
	then
		 Logger.debug("Error code nanopore-depot instrument properties metrichorVersion");
		 $contextValidation.addErrors("metrichorVersion","error.required");  
end*/

