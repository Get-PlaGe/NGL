//created on: Nov 21, 2013
package rules

rule "Find Fungi for taxonomy treatment"
	@nglBI( F_QC_1 )
	dialect "java"
	salience 600
	no-loop
	when
			$readset : (ReadSet ( $treatmentTaxo:treatments["taxonomy"] && $treatmentTaxo != null )) 									
	then
		Logger.debug("Find Fungi in taxonomy krona "+$readset.code);	
			
		String krona = new String(((PropertyFileValue)$treatmentTaxo.results.get("read1").get("krona")).value);
		Pattern p1 = Pattern.compile(".*<node name=\"Fungi\">\\s+<magnitude><val>(\\d+)</val></magnitude>.*", Pattern.DOTALL);
		Matcher m1 = p1.matcher(krona);
												
		Pattern p2 = Pattern.compile(".*<node name=\"Fungi\"\\s+magnitude=\"(\\d+)\">.*", Pattern.DOTALL);
		Matcher m2 = p2.matcher(krona);

		Pattern p3 = Pattern.compile(".*<node name=\"Fungi\">\\s+(<members><val>\\S+</val>\\s+</members>\\s+)?<count><val>(\\d+)</val></count>.*", Pattern.DOTALL);
		Matcher m3 = p3.matcher(krona);
		
		
		if(m1.matches() || m2.matches() || m3.matches()){
			String value = (m1.matches())?m1.group(1):((m2.matches())?m2.group(1):m3.group(2));
			Logger.debug("Value "+value);
			Double fungiPercentValue = (Double.valueOf(value) / 20000) * 100;
			Logger.debug("Match Group Fungi = "+fungiPercentValue);
			
			List<Map<String, ?>> keywordBilan = ((PropertyObjectListValue)$treatmentTaxo.results.get("read1").get("keywordBilan")).value;
			
			List<Map<String, ?>> keywordBRemove = new ArrayList<Map<String, ?>>(); 
			for(Map<String, ?> keywordOne : keywordBilan){
				String keywordValue = (String)keywordOne.get("keyword");
				if(keywordValue.equals("Fungi")){
					Logger.debug("keywordValue = "+keywordValue);
					keywordBRemove.add(keywordOne);
				}	
			}
			keywordBilan.removeAll(keywordBRemove);
			
			Map<String, Object> fungiKeyword = new HashMap<String, Object>();
			fungiKeyword.put("keyword","Fungi");
			fungiKeyword.put("percent",fungiPercentValue);
			fungiKeyword.put("nbSeq",Integer.valueOf(value));
			keywordBilan.add(fungiKeyword);
			if("taxonomy".equals($treatmentTaxo.code)){
				MongoDBDAO.update(InstanceConstants.READSET_ILLUMINA_COLL_NAME, ReadSet.class, 
							DBQuery.is("code", $readset.code),
							DBUpdate.set("treatments.taxonomy.read1.keywordBilan.value", keywordBilan));
			}else{
				MongoDBDAO.update(InstanceConstants.READSET_ILLUMINA_COLL_NAME, ReadSet.class, 
							DBQuery.is("code", $readset.code),
							DBUpdate.set("treatments.taxonomyKraken.read1.keywordBilan.value", keywordBilan));
			}
			
			
		}
		
end

rule "Synchro readset old lims : updateReadSetAfterQC"
	@nglBI( F_QC_1 )
	dialect "java"
	salience 600
	no-loop
	when
		$readset : ReadSet(typeCode == "default-readset" || typeCode == "rsillumina")
	then
		Logger.debug("Synchro readset old lims : updateReadSetAfterQC "+$readset.code);
		Spring.getBeanOfType(ILimsRunServices.class).updateReadSetAfterQC($readset);
end

rule "Synchro readset old lims F_VQC : valuationReadSet"
	@nglBI( F_VQC_1 )
	dialect "java"
	salience 600
	no-loop
	when
		$readset : ReadSet(typeCode == "default-readset" || typeCode == "rsillumina")
	then
		Logger.debug("Synchro readset old lims F_VQC : valuationReadSet "+$readset.code);
		Spring.getBeanOfType(ILimsRunServices.class).valuationReadSet($readset, true);
			
end

rule "Synchro readset old lims F_AUA : valuationReadSet"
	@nglBI( A-UA_1 )
	dialect "java"
	salience 600
	no-loop
	when
		$readset : ReadSet(typeCode == "default-readset" || typeCode == "rsillumina")
	then
		Logger.debug("Synchro readset old lims F_AUA : valuationReadSet "+$readset.code);
		Spring.getBeanOfType(ILimsRunServices.class).valuationReadSet($readset, false);
			
end

rule "Calculate 2DPass.readsPercent for ngsrg-nanopore"
	@nglBI( F_RG_1 )
	dialect "java"
	salience 600
	no-loop
	when
		$readset : ReadSet($treatment : treatments["ngsrg"], $treatment!=null, $treatment.typeCode == "ngsrg-nanopore")
		$mapValue : Map() from $treatment.results.values()
		$2DPass : Entry(key=="2DPass") from $mapValue.entrySet()
		$1DForward : Entry(key=="1DForward") from $mapValue.entrySet()
	then
		Logger.debug("Calculate 2DPass.readsPercent");
		PropertyObjectValue propertyValueTwoD = (PropertyObjectValue)$2DPass.getValue();
		Map mapPropertyValueTwoD = propertyValueTwoD.getValue();
		Long twoDPassNbReads = (Long)mapPropertyValueTwoD.get("nbReads");
		
		Long oneDForwardNbReads = (Long)((Map)((PropertyValue)$1DForward.getValue()).getValue()).get("nbReads");
		
		Double twoDPassReadsPercent = roundValue((double)twoDPassNbReads/oneDForwardNbReads*100);
		
		mapPropertyValueTwoD.put("readsPercent", twoDPassReadsPercent);
		MongoDBDAO.update(InstanceConstants.READSET_ILLUMINA_COLL_NAME, ReadSet.class, 
						DBQuery.is("code", $readset.code),
						DBUpdate.set("treatments.ngsrg.default.2DPass", propertyValueTwoD));
		
end