# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Home page
GET     /                           									controllers.main.tpl.Main.home()

#containers tpl
GET 	/containers/:homecode/home										controllers.containers.tpl.Containers.home(homecode:java.lang.String)
GET		/tpl/containers/search											controllers.containers.tpl.Containers.search()
GET		/tpl/containers/js-routes										controllers.containers.tpl.Containers.javascriptRoutes()

#containers api
GET		/api/containers													controllers.containers.api.Containers.list()
#TODO a revoir plutot /api/containers/supports/categories
GET		/api/containers/container-support-categories  					controllers.containers.api.ContainerSupportCategories.list()
GET		/api/containers/categories										controllers.containers.api.ContainerCategories.list()
GET		/api/containers/:code											controllers.containers.api.Containers.get(code:java.lang.String)
PUT		/api/containers/batch											controllers.containers.api.Containers.updateBatch()
PUT		/api/containers/:code											controllers.containers.api.Containers.update(code:java.lang.String)

#processes tpl
GET 	/processes/:homecode/home										controllers.processes.tpl.Processes.home(homecode:java.lang.String)
GET		/tpl/processes/searchColmuns									controllers.processes.tpl.Processes.searchColumns()
GET		/tpl/processes/get-properties-definitions/:processTypeCode		controllers.processes.tpl.Processes.getPropertiesDefinitions(processTypeCode:java.lang.String)
GET		/tpl/processes/search/:processTypeCode							controllers.processes.tpl.Processes.search(processTypeCode:java.lang.String)
GET		/tpl/processes/searchContainers									controllers.processes.tpl.Processes.searchContainers()
GET		/tpl/processes/newProcesses/:processTypeCode					controllers.processes.tpl.Processes.newProcesses(processTypeCode:java.lang.String)
GET		/tpl/processes/newProcessesColumns/:processTypeCode				controllers.processes.tpl.Processes.newProcessesColumns(processTypeCode:java.lang.String)
GET		/tpl/processes/js-routes										controllers.processes.tpl.Processes.javascriptRoutes()

#processes api
POST	/api/processes													controllers.processes.api.Processes.save()
#POST	/api/processes/:supportCode										controllers.processes.api.Processes.saveFromSupport(supportCode:java.lang.String)
PUT		/api/processes/:code											controllers.processes.api.Processes.update(code:java.lang.String)
DELETE	/api/processes/:code											controllers.processes.api.Processes.delete(code:java.lang.String)
HEAD	/api/processes/:code               								controllers.processes.api.Processes.head(code: java.lang.String)
GET		/api/processes													controllers.processes.api.Processes.list()
GET		/api/processes/types											controllers.processes.api.ProcessTypes.list()
GET		/api/processes/categories										controllers.processes.api.ProcessCategories.list()
GET		/api/processes/:code											controllers.processes.api.Processes.get(code:java.lang.String)

#experiments tpl
GET 	/experiments/:homecode/home																controllers.experiments.tpl.Experiments.home(homecode:java.lang.String)
GET 	/experiments/edit/:experimentCode														controllers.experiments.tpl.Experiments.edit(experimentCode:java.lang.String)
GET		/tpl/experiments/search-supports														controllers.experiments.tpl.Experiments.searchSupports()
GET		/tpl/experiments/newExperiments/:experimentTypeCode										controllers.experiments.tpl.Experiments.newExperiments(experimentTypeCode:java.lang.String)
GET		/tpl/experiments/js-routes																controllers.experiments.tpl.Experiments.javascriptRoutes()
GET		/tpl/experiments/get-template/:atomicType/:inputCategory/:outputCategory				controllers.experiments.tpl.Experiments.getTemplate(atomicType:java.lang.String,inputCategory:java.lang.String,outputCategory:java.lang.String)
GET		/tpl/experiments/create-or-edit-experiment												controllers.experiments.tpl.Experiments.createOrEditExperiment()
GET		/tpl/experiments/getEditExperimentColumns												controllers.experiments.tpl.Experiments.getEditExperimentColumns()
GET		/tpl/experiments/search/:experimentTypeCode												controllers.experiments.tpl.Experiments.search(experimentTypeCode:java.lang.String)


#experiments api
GET		/api/experiments												controllers.experiments.api.Experiments.list()
POST	/api/experiments/sample-sheets 									instruments.io.Outputs.sampleSheets()
PUT		/api/experiments/:code/experiment-information					controllers.experiments.api.Experiments.updateExperimentInformations(code:java.lang.String)
PUT		/api/experiments/:code/experiment-properties					controllers.experiments.api.Experiments.updateExperimentProperties(code:java.lang.String)
PUT		/api/experiments/:code/instrument-information					controllers.experiments.api.Experiments.updateInstrumentInformations(code:java.lang.String)
PUT		/api/experiments/:code/instrument-properties					controllers.experiments.api.Experiments.updateInstrumentProperties(code:java.lang.String)
PUT		/api/experiments/:code/data										controllers.experiments.api.Experiments.updateData(code:java.lang.String)
POST	/api/experiments/:code/comment									controllers.experiments.api.Experiments.addComment(code:java.lang.String)
PUT		/api/experiments/:code/comment									controllers.experiments.api.Experiments.updateComment(code:java.lang.String)
DELETE	/api/experiments/:code/comment/:commentCode									controllers.experiments.api.Experiments.deleteComment(code:java.lang.String, commentCode:java.lang.String)
PUT		/api/experiments/:code/containerSupportCode/:newSupportCode		controllers.experiments.api.Experiments.updateContainerSupportCode(code:java.lang.String,newSupportCode:java.lang.String)
PUT		/api/experiments/:code/state/:state								controllers.experiments.api.Experiments.updateStateCode(code:java.lang.String,state:java.lang.String)
PUT		/api/experiments/:code/state									controllers.experiments.api.Experiments.nextState(code:java.lang.String)
PUT		/api/experiments/:code/containers								controllers.experiments.api.Experiments.updateContainers(code:java.lang.String)
POST	/api/experiments												controllers.experiments.api.Experiments.save()
GET		/api/experiment/categories										controllers.experiments.api.ExperimentCategories.list()
GET		/api/experiment/types											controllers.experiments.api.ExperimentTypes.list()
GET		/api/experiment/type/nodes										controllers.experiments.api.ExperimentTypeNodes.list()
GET		/api/experiment/types/:code										controllers.experiments.api.ExperimentTypes.get(code:java.lang.String)
GET		/api/experiments/protocols 										controllers.experiments.api.Protocols.list()
GET		/api/experiments/:code											controllers.experiments.api.Experiments.get(code:java.lang.String)

#supports api
GET		/api/supports													controllers.supports.api.Supports.list()
GET		/api/supports/:code												controllers.supports.api.Supports.get(code:java.lang.String)
HEAD	/api/supports/:code												controllers.supports.api.Supports.head(code:java.lang.String)

GET		/api/experiment/instrument-properties/:instrumentUsedTypeCode	controllers.experiments.api.Experiments.getInstrumentProperties(instrumentUsedTypeCode:java.lang.String)


#samples
GET		/api/samples/list												controllers.samples.api.Samples.list()

#projects
GET		/api/projects/list												@controllers.projects.api.Projects.list()

#instruments
GET		/api/instruments/types  										controllers.instruments.api.InstrumentUsedTypes.list()
GET		/api/instruments/categories  									controllers.instruments.api.InstrumentCategories.list()
GET		/api/instruments												controllers.instruments.api.Instruments.list()

#protocols api
GET		/api/protocols													controllers.protocols.api.Protocols.list()

#Common
GET		/api/commons/states												controllers.commons.api.States.list()
GET		/api/commons/types												controllers.commons.api.CommonInfoTypes.list()
GET		/api/commons/resolutions  										@controllers.resolutions.api.Resolutions.list()
GET		/api/commons/users  											controllers.commons.api.Users.list()

#Parameter
GET    /api/parameters/:typeCode										controllers.commons.api.Parameters.list(typeCode:java.lang.String)
GET    /api/parameters/:typeCode/:code 									controllers.commons.api.Parameters.get(typeCode:java.lang.String,code:java.lang.String)

# load data
GET	   	   /loaddata/:homecode/home										controllers.dataload.SampleLoad.home(homecode:java.lang.String)
POST   	   /loaddata													controllers.dataload.SampleLoad.uploadDataFromCSVFile()
POST	   /createtemplate												controllers.dataload.SampleLoad.createTemplateFile()

#value of property definition
GET		/api/values														controllers.commons.api.Values.list()

#reporting
GET    	/api/reporting/filters    	           			@controllers.reporting.api.FilteringConfigurations.list()
GET	   	/api/reporting/filters/:code					@controllers.reporting.api.FilteringConfigurations.get(code)
POST 	/api/reporting/filters							@controllers.reporting.api.FilteringConfigurations.save()
PUT    	/api/reporting/filters/:code					@controllers.reporting.api.FilteringConfigurations.update(code)
DELETE	/api/reporting/filters/:code					@controllers.reporting.api.FilteringConfigurations.delete(code: java.lang.String)

#reagents (temporary)
GET 	/api/reagent-catalogs/kits										@controllers.reagents.api.KitCatalogs.list()
POST 	/api/reagent-catalogs/kits										@controllers.reagents.api.KitCatalogs.save()

->  /authentication authentication.Routes


# Map static resources from the /public folder to the /assets URL path
GET     /assets/*file               									controllers.Assets.at(path="/public", file)
GET     /messages.js                									controllers.main.tpl.Main.jsMessages()
GET     /codes.js        	        									controllers.main.tpl.Main.jsCodes()